// File: Views/Admin/Blogs/EditBlog.cshtml
@model WinWin.DataLayer.DTOS.EditBlogViewModel
@using Microsoft.AspNetCore.Mvc.Rendering
@{
    ViewData["Title"] = "ویرایش مقاله";
    Layout = "~/Views/Shared/AdminProfile/AdminProfileLayout.cshtml";
    var blogGroups = ViewData["BlogGroups"] as List<SelectListItem>;
}

<div class="page-inner">
    <div class="d-flex align-items-left align-items-md-center flex-column flex-md-row pt-2 pb-4">
        <div>
            <h3 class="fw-bold mb-3">مدیریت</h3>
            <h6 class="op-7 mb-2">مدیریت / @ViewData["Title"]</h6>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-sm p-4">
                <h4 class="mb-4 text-center text-primary">@ViewData["Title"]</h4>
                <form id="editBlogForm" asp-action="EditBlog" method="post" enctype="multipart/form-data" novalidate>
                    <input asp-for="BlogId" type="hidden" />
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                    <div class="mb-3">
                        <label asp-for="Title" class="form-label"></label>
                        <input asp-for="Title" class="form-control" />
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="ShortDescription" class="form-label"></label>
                        <textarea asp-for="ShortDescription" class="form-control" rows="3"></textarea>
                        <span asp-validation-for="ShortDescription" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Description" class="form-label"></label>
                        <textarea asp-for="Description" class="form-control" id="editor" rows="10">@Model.Description</textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">گروه خبری</label>
                        <select id="blogGroupSelect" class="form-select" onchange="getSubGroups(this.value)">
                            <option value="">انتخاب کنید</option>
                            @foreach (var blogGroup in blogGroups)
                            {
                                @if (int.Parse(blogGroup.Value) == Model.BlogGroupId)
                                {
                                    <option value="@blogGroup.Value" selected>@blogGroup.Text</option>
                                }
                                <option value="@blogGroup.Value">@blogGroup.Text</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label asp-for="BlogGroupId" class="form-label"></label>
                        <select id="subGroupSelect" asp-for="BlogGroupId" class="form-select" asp-items="ViewBag.BlogGroupId">
                            <option value="">انتخاب کنید</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Thumbnail" class="form-label"></label>
                        <input asp-for="Thumbnail" type="file" class="form-control" id="thumbnailInput" />
                        <span asp-validation-for="Thumbnail" class="text-danger"></span>

                        <div class="mt-3 text-center d-none" id="previewContainer">
                            <div class="position-relative d-inline-block">
                                <img id="imagePreview" src="#" class="img-fluid rounded shadow" style="max-height: 200px;" />
                                <button type="button" class="btn btn-danger btn-sm position-absolute top-0 start-100 translate-middle" id="removeImage">
                                    ×
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Tags" class="form-label"></label>
                        <input asp-for="Tags" class="form-control" rows="3" />
                        <span>هر برچسب را با علامت , از دیگری جدا کنید</span>
                        <span asp-validation-for="Tags" class="text-danger"></span>
                    </div>

                    <div class="text-center">
                        <button type="submit" class="btn btn-primary w-100">ثبت مقاله</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="text-center mt-3">
        <a asp-action="Index" class="btn btn-outline-secondary">بازگشت به مدیریت</a>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script src="https://cdn.ckeditor.com/ckeditor5/39.0.1/classic/ckeditor.js"></script>
    <script>
        ClassicEditor.create(document.querySelector('#editor'), {
            language: 'fa',
            toolbar: [
                'heading', '|', 'bold', 'italic', 'link', 'bulletedList',
                'numberedList', 'blockQuote', 'imageUpload', 'undo', 'redo', 'alignment'
            ],
            extraPlugins: [function (editor) {
                editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                    return {
                        upload: () => {
                            return loader.file.then(file => {
                                return new Promise((resolve, reject) => {
                                    const formData = new FormData();
                                    formData.append('upload', file);
                                    fetch('/Admin/Home/UploadImage', {
                                        method: 'POST',
                                        body: formData
                                    })
                                    .then(response => response.json())
                                    .then(data => {
                                        if (data.error) {
                                            reject(data.error);
                                        } else {
                                            resolve({ default: data.url });
                                        }
                                    })
                                    .catch(reject);
                                });
                            });
                        }
                    };
                };
            }]
        })
        .catch(console.error);
    </script>
    <script>
        async function getSubGroups(blogId) {
            try {
                const response = await fetch(`/GetSubGroups/?id=${blogId}`);
                if (!response.ok) {
                    throw new Error('خطا در بارگذاری داده‌ها');
                }
                const data = await response.json();
                const select = document.getElementById('subGroupSelect');
                select.innerHTML = '<option value="">انتخاب کنید</option>';
                data.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item.value;
                    option.textContent = item.text;
                    select.appendChild(option);
                });
            } catch (error) {
                console.error('خطا:', error);
            }
        }
    </script>
}