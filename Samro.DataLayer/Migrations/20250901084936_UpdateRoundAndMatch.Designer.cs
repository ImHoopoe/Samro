// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WinWin.DataLayer.Contextes;

#nullable disable

namespace Samro.DataLayer.Migrations
{
    [DbContext(typeof(SamroContext))]
    [Migration("20250901084936_UpdateRoundAndMatch")]
    partial class UpdateRoundAndMatch
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Samro.DataLayer.Entities.TournamentMatch.TournamentParticipant", b =>
                {
                    b.Property<int>("TournamentParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentParticipantId"));

                    b.Property<int?>("MatchRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TournamentParticipantId");

                    b.HasIndex("MatchRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserId");

                    b.ToTable("TournamentParticipants");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.BlogBlogGroup.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<int>("BlogGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("PublishDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogId");

                    b.HasIndex("BlogGroupId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.BlogBlogGroup.BlogGroup", b =>
                {
                    b.Property<int>("BlogGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogGroupId"));

                    b.Property<string>("BlogGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("BlogGroupId");

                    b.HasIndex("ParentId");

                    b.ToTable("BlogGroups");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.ChatHub.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("RoomId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.ChatHub.Room", b =>
                {
                    b.Property<Guid>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("User2Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoomId");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.EventModels.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("FaceToFaceDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FaceToFaceLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HostelLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForMen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTimeEnds")
                        .HasColumnType("bit");

                    b.Property<string>("MatchLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaximnumPlayers")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("RegsiterEndsAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("RegsiterStartsAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("SportId")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TournamentDoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("TournamentRefereeId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("WeighInDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("WeighInLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TournamentId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("SportId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.RolePernissionUser.RolePermission", b =>
                {
                    b.Property<int>("RpI")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RpI"));

                    b.Property<int>("PermissonId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RpI");

                    b.HasIndex("PermissonId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermisions");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.RolePernissionUser.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.Roles.Permission", b =>
                {
                    b.Property<int>("PermissonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissonId"));

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PermissonTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PermissonId");

                    b.HasIndex("ParentId");

                    b.ToTable("Permisions");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.Roles.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.Roles.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivationCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMan")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("UserId");

                    b.HasIndex("MatchId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.Sport.Sport", b =>
                {
                    b.Property<int>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SportId"));

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("SportName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SportId");

                    b.HasIndex("ParentId");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.Sport.SportToMatch", b =>
                {
                    b.Property<int>("SportToMatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SportToMatchId"));

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("SportToMatchId");

                    b.HasIndex("MatchId");

                    b.HasIndex("SportId");

                    b.ToTable("SportToMatch");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.TournamentMatch.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchId"));

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("MatchDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Player1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Player2Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SportId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.TournamentMatch.MatchRole", b =>
                {
                    b.Property<int>("MatchRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchRoleId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MatchRoleDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchRoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatchRoleId");

                    b.ToTable("MatchRoles");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.TournamentMatch.MatchScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerBlueScore")
                        .HasColumnType("int");

                    b.Property<int>("PlayerRedScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("MatchScores");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.TournamentMatch.MatchUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchUsers");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.TournamentMatch.MatchWarning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("IssuedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerNumber")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchWarnings");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.TournamentMatch.Round", b =>
                {
                    b.Property<int>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoundId"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("Player1Score")
                        .HasColumnType("int");

                    b.Property<int>("Player2Score")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("RoundId");

                    b.HasIndex("MatchId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.TournamentMatch.TournamentUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserId");

                    b.ToTable("TournamentUsers");
                });

            modelBuilder.Entity("Samro.DataLayer.Entities.TournamentMatch.TournamentParticipant", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.TournamentMatch.MatchRole", "MatchRole")
                        .WithMany()
                        .HasForeignKey("MatchRoleId");

                    b.HasOne("WinWin.DataLayer.Entities.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("WinWin.DataLayer.Entities.EventModels.Tournament", "Tournament")
                        .WithMany("TournamentParticipants")
                        .HasForeignKey("TournamentId");

                    b.HasOne("WinWin.DataLayer.Entities.Roles.User", "User")
                        .WithMany("TournamentParticipants")
                        .HasForeignKey("UserId");

                    b.Navigation("MatchRole");

                    b.Navigation("Role");

                    b.Navigation("Tournament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.BlogBlogGroup.Blog", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.BlogBlogGroup.BlogGroup", "BlogGroup")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogGroup");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.BlogBlogGroup.BlogGroup", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.BlogBlogGroup.BlogGroup", "ParentGroup")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("ParentGroup");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.ChatHub.Message", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.Roles.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinWin.DataLayer.Entities.ChatHub.Room", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.ChatHub.Room", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.Roles.User", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WinWin.DataLayer.Entities.Roles.User", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.EventModels.Tournament", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.Roles.User", "CreatedByUser")
                        .WithMany("CreatedTournaments")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinWin.DataLayer.Entities.Sport.Sport", "Sport")
                        .WithMany("SportToTournaments")
                        .HasForeignKey("SportId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.RolePernissionUser.RolePermission", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.Roles.Permission", "Permisson")
                        .WithMany("RolePermisions")
                        .HasForeignKey("PermissonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinWin.DataLayer.Entities.Roles.Role", "Role")
                        .WithMany("RolePermisions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permisson");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.RolePernissionUser.UserRole", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinWin.DataLayer.Entities.Roles.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.Roles.Permission", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.Roles.Permission", null)
                        .WithMany("Permissons")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.Roles.User", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.TournamentMatch.Match", null)
                        .WithMany("Players")
                        .HasForeignKey("MatchId");

                    b.HasOne("WinWin.DataLayer.Entities.Roles.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.Sport.Sport", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.Sport.Sport", "Parent")
                        .WithMany("SubGroups")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.Sport.SportToMatch", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.TournamentMatch.Match", "Match")
                        .WithMany("SportToMatches")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinWin.DataLayer.Entities.Sport.Sport", "Sport")
                        .WithMany("SportToMatches")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.TournamentMatch.Match", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.EventModels.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.TournamentMatch.MatchScore", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.TournamentMatch.Match", "Match")
                        .WithOne("Score")
                        .HasForeignKey("WinWin.DataLayer.Entities.TournamentMatch.MatchScore", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.TournamentMatch.MatchUser", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.TournamentMatch.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinWin.DataLayer.Entities.Roles.User", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.TournamentMatch.MatchWarning", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.TournamentMatch.Match", "Match")
                        .WithMany("Warnings")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.TournamentMatch.Round", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.TournamentMatch.Match", null)
                        .WithMany("Rounds")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.TournamentMatch.TournamentUser", b =>
                {
                    b.HasOne("WinWin.DataLayer.Entities.EventModels.Tournament", "Tournament")
                        .WithMany("RegisteredUsers")
                        .HasForeignKey("TournamentId");

                    b.HasOne("WinWin.DataLayer.Entities.Roles.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Tournament");

                    b.Navigation("user");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.BlogBlogGroup.BlogGroup", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.ChatHub.Room", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.EventModels.Tournament", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("RegisteredUsers");

                    b.Navigation("TournamentParticipants");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.Roles.Permission", b =>
                {
                    b.Navigation("Permissons");

                    b.Navigation("RolePermisions");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.Roles.Role", b =>
                {
                    b.Navigation("RolePermisions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.Roles.User", b =>
                {
                    b.Navigation("CreatedTournaments");

                    b.Navigation("TournamentParticipants");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.Sport.Sport", b =>
                {
                    b.Navigation("SportToMatches");

                    b.Navigation("SportToTournaments");

                    b.Navigation("SubGroups");
                });

            modelBuilder.Entity("WinWin.DataLayer.Entities.TournamentMatch.Match", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Rounds");

                    b.Navigation("Score")
                        .IsRequired();

                    b.Navigation("SportToMatches");

                    b.Navigation("Warnings");
                });
#pragma warning restore 612, 618
        }
    }
}
